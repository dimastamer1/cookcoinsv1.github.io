/** @format */

import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import "./style.scss";

const Miner = () => {
  const darkMode = useSelector(state => state.darkMode);
  const totalCoins = useSelector(state => state.totalCoins);
  const selectedSkin = useSelector(state => state.selectedSkin);
  const totalBattery = useSelector(state => state.totalBattery);
  const widthOfDiv = useSelector(state => state.widthOfDiv);
  const levelOfClicks = useSelector(state => state.levelOfClicks);
  const levelOfCharge = useSelector(state => state.levelOfCharge);
  const dispatch = useDispatch();

  const [bonus, setBonus] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false); // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  const handleClick = (event) => {
    // Check if the event is a pointer event and has only one touch point
    if (event.pointerType === 'mouse' || event.pointerType === 'touch') {
      if (!isProcessing) {
        setIsProcessing(true);
        dispatch({ type: "ADD_COINS" });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
        setTimeout(() => {
          setIsProcessing(false);
        }, 10); // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å CSS-–ø–µ—Ä–µ—Ö–æ–¥—É
      }
    }
  };

  useEffect(() => {
    // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–æ–Ω—É—Å–∞
    const bonusTimer = setInterval(() => {
      if (bonus) {
        setBonus(false);
      }
    }, 6000);

    return () => clearInterval(bonusTimer);
  }, [bonus]);

  useEffect(() => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
    const bonusTimeout = setTimeout(() => {
      setBonus(true);
    }, 6000);

    return () => clearTimeout(bonusTimeout);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
  const formatNumber = (num) => {
    if (num >= 1000000000) {
      return (num / 1000000000).toFixed(1) + 'B'; // –º–∏–ª–ª–∏–∞—Ä–¥—ã
    } else if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M'; // –º–∏–ª–ª–∏–æ–Ω—ã
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K'; // —Ç—ã—Å—è—á–∏
    } else {
      return num; // –º–µ–Ω–µ–µ 1000
    }
  };

  return (
    <>
      <div
        className="centerItems"
        style={{ color: darkMode ? "white" : "black", transition: "0.5s" }}
      >
        <div className="title">
          <h1> </h1>
          <div className="miner__info">
            <p>
              <b>+{levelOfClicks}üç™</b>
            </p>
            <h2 className="totalCoinsDisplay">{formatNumber(totalCoins)}</h2>
            <p>+{levelOfCharge} ‚ö°Ô∏è</p>
          </div>
        </div>
        <div className="mineContainer">
          <img
            className="coin"
            onPointerDown={handleClick} // –ò—Å–ø–æ–ª—å–∑—É–µ–º PointerEvent
            src={selectedSkin}
            alt={"img of bitcoin"}
          />
        </div>

        <h3 className="batteryDisplay"> {totalBattery}üîã</h3>
        <div className="batterySizeBorder">
          <div
            className="batterySizeDisplay"
            style={{ width: widthOfDiv + "px" }}
          ></div>
        </div>
      </div>
    </>
  );
};

export default Miner;
